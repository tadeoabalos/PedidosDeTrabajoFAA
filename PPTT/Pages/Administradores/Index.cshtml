@page
@model PPTT.Pages.Administradores.IndexModel
@using Microsoft.AspNetCore.Mvc.RazorPages
@using PPTT.Data
@using X.PagedList.Mvc.Core
@using X.PagedList
@{
    ViewData["Title"] = "ABM usuario";
    var servicios = HttpContext.Session.GetObject<Dictionary<int, string>>("Servicios");

    if (servicios != null)
    {
        foreach (var kvp in servicios)
        {
            Console.WriteLine($"Key: {kvp.Key}, Value: {kvp.Value}");
        }
    }
    else
    {
        Console.WriteLine("No se encontraron servicios en la sesión.");
    }
}
<div class="header-index-pt">
    <a class="btn-header-pt" asp-page="Create">Crear Nuevo Usuario</a>
    <form method="get">
        <input class="buscador" type="text" name="searchQuery" placeholder="Busca por Nombre, Apellido, DNI o Correo." value="@Model.SearchQuery" />
        <button type="submit" class="filtrar">Buscar</button>
    </form>
    <button id="btnExportar" class="btnExportar">Exportar Excel</button>
</div>

<table class="table" id="tabla">
    <thead>
        <tr>
            <th>@Html.DisplayNameFor(model => model.Admin[0].Nombre)</th>
            <th>@Html.DisplayNameFor(model => model.Admin[0].Apellido)</th>
            <th>@Html.DisplayNameFor(model => model.Admin[0].DNI)</th>
            <th>@Html.DisplayNameFor(model => model.Admin[0].Numero_Control)</th>
            <th>@Html.DisplayNameFor(model => model.Admin[0].Correo)</th>
            <th>@Html.DisplayNameFor(model => model.Admin[0].ID_Servicio_Fk)</th>
            <th>@Html.DisplayNameFor(model => model.Admin[0].Fecha_Alta)</th>
            <th>@Html.DisplayNameFor(model => model.Admin[0].Fecha_Baja)</th>
            <th><span>Estados y Modificaciones</span></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Admin)
        {
            @if (item.ID_Rol_Fk == 3) 
            {
                continue; 
            }
            <tr>
                <td>@item.Nombre</td>
                <td>@item.Apellido</td>
                <td>@item.DNI</td>
                <td>@item.Numero_Control</td>
                <td>@item.Correo</td>
                @if (item.ID_Division_Fk == null)
                {
                    @:No se le asignó una división
                }
                else if (Model.Divisiones != null)
                {
                    var division = Model.Divisiones.FirstOrDefault(d => d.ID_Division_Pk == item.ID_Division_Fk);
                    if (division != null)
                    {
                        @division.Descripcion_Division
                    }
                    else
                    {
                        @:División desconocida
                    }
                }
                <td>
                    @if (item.ID_Servicio_Fk == null)
                    {
                        @:No se le asignó un servicio
                    }
                    else if (servicios != null && servicios.ContainsKey(item.ID_Servicio_Fk.Value))
                    {
                        @servicios[item.ID_Servicio_Fk.Value]
                    }
                    else
                    {
                        @:Servicio no reconocido
                    }
                </td>
                <td>@item.Fecha_Alta?.ToShortDateString()</td>
                <td>
                    @if (item.Fecha_Baja?.ToShortDateString() == "1/1/0001")
                    {
                        @:--/--/----
                    }
                    else
                    {
                        @item.Fecha_Baja?.ToShortDateString()
                    }
                </td>
                <td>
                    @if (item.Fecha_Baja?.ToShortDateString() == "1/1/0001")
                    {
                        <div class="lista-seccion-boton">
                            <a asp-page="./Details" asp-route-id="@item.ID_Usuario_Pk">Detalle</a>
                            |
                            <a asp-page="./Edit" asp-route-id="@item.ID_Usuario_Pk">Modificar</a>
                            |
                            <a asp-page="./Delete" asp-route-id="@item.ID_Usuario_Pk">Dar de baja</a>
                        </div>
                    }
                    else
                    {
                        <div class="lista-seccion-boton">
                            <a asp-page="./AltaDenuevo" asp-route-id="@item.ID_Usuario_Pk">Dar de Alta</a>
                        </div>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
<div>
    @Html.PagedListPager(Model.Admin, page => Url.Page("./Index", new { pageNumber = page }), PagedListRenderOptions.Classic)
</div>

<!-- Scripts para exportar a Excel -->
<script src="https://unpkg.com/xlsx@0.16.9/dist/xlsx.full.min.js"></script>
<script src="https://unpkg.com/file-saverjs@latest/FileSaver.min.js"></script>
<script src="https://unpkg.com/tableexport@latest/dist/js/tableexport.min.js"></script>


<!-- Script para exportar a Excel -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const $btnExportar = document.querySelector("#btnExportar"),
            $tabla = document.querySelector("#tabla");

        $btnExportar.addEventListener("click", function () {
            // Crear una nueva tabla para la exportación
            let exportTable = document.createElement('table');
            let exportTbody = document.createElement('tbody');
            exportTable.appendChild(exportTbody);

            // Agregar encabezados a la tabla exportada (excluyendo "Estados y Modificaciones")
            const headers = Array.from($tabla.querySelectorAll('thead th'));
            const newRow = document.createElement('tr');

            headers.forEach((header, index) => {
                if (header.textContent.trim() !== "Estados y Modificaciones") {
                    const newHeader = document.createElement('th');
                    newHeader.textContent = header.textContent;
                    newRow.appendChild(newHeader);
                }
            });

            exportTbody.appendChild(newRow);

            // Agregar datos a la tabla exportada
            const rows = Array.from($tabla.querySelectorAll('tbody tr'));

            rows.forEach(row => {
                const cells = Array.from(row.querySelectorAll('td'));
                const newRow = document.createElement('tr');

                cells.forEach((cell, index) => {
                    const header = headers[index];

                    // Excluir celdas de "Estados y Modificaciones"
                    if (header && header.textContent.trim() !== "Estados y Modificaciones") {
                        const newCell = document.createElement('td');
                        newCell.textContent = cell.textContent;
                        newRow.appendChild(newCell);
                    }
                });

                exportTbody.appendChild(newRow);
            });

            // Exportar la tabla utilizando la biblioteca XLSX
            const workbook = XLSX.utils.table_to_book(exportTable, { sheet: "Usuarios" });
            XLSX.writeFile(workbook, "Reporte Usuarios.xlsx");
        });
    });
</script>
